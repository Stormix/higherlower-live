generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  games         Game[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


model Game {
  id        String    @id @default(cuid())

  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  winner    String?

  options   String[]
  answer    Int

  votes     Vote[]

  duration  Int      @default(45)
  createdAt DateTime
  endsAt   DateTime
  updatedAt DateTime

  @@unique([userId, createdAt]) // TODO: Check if this is correct
}


model Vote {
  id        String    @id @default(cuid())
  gameId    String
  game      Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)

  username  String
  answer    Int

  createdAt DateTime
  updatedAt DateTime
  isCorrect Boolean
  points    Int     @default(0)

  @@unique([gameId, username])
  @@index([gameId, createdAt])
}


model Stat {
  id        String    @id @default(cuid())
  keyword   String
  searchVolume BigInt
  link        String
  image       String
  author      String

  @@index([keyword])
}
